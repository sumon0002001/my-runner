'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* --------------------
 * is-it-type module
 * Entry point
 * ------------------*/
// Exports

/*
 * Replication of core-util-is methods.
 * https://www.npmjs.com/package/core-util-is
 * NB `isBuffer()` is omitted and `isObject()` is different from `core-util-is`'s implementation
 */
function isArray(arg) {
  return Array.isArray(arg);
}
function isBoolean(arg) {
  return isType('boolean', arg);
}
function isNull(arg) {
  return arg === null;
}
function isUndefined(arg) {
  return arg === void 0; // eslint-disable-line no-void
}
function isNullOrUndefined(arg) {
  return arg == null;
}
function isNumber(arg) {
  return isType('number', arg);
}
function isString(arg) {
  return isType('string', arg);
}
function isSymbol(arg) {
  return isType('symbol', arg);
}
function isRegExp(arg) {
  return isTypeByToString('RegExp', arg);
}
function isDate(arg) {
  return isTypeByToString('Date', arg);
}
function isError(arg) {
  return isTypeByToString('Error', arg) || arg instanceof Error;
}
function isFunction(arg) {
  return isType('function', arg);
}
function isPrimitive(arg) {
  var type = getType(arg);
  return arg == null || type === 'boolean' || type === 'number' || type === 'string' || type === 'symbol';
}
/*
 * Additional methods
 */
// Strings

function isEmptyString(arg) {
  return arg === '';
}
function isFullString(arg) {
  return isString(arg) && !isEmptyString(arg);
} // Objects

function isObject(arg) {
  return isType('object', arg) && !isNull(arg) && isTypeByToString('Object', arg);
}
function isEmptyObject(arg) {
  return isObject(arg) && Object.keys(arg).length === 0;
} // Numbers

function isInteger(arg) {
  return Number.isInteger(arg);
}
function isPositiveInteger(arg) {
  return isInteger(arg) && arg > 0;
}
function isPositiveIntegerOrZero(arg) {
  return isInteger(arg) && arg >= 0;
}
function isNegativeInteger(arg) {
  return isInteger(arg) && arg < 0;
}
function isNegativeIntegerOrZero(arg) {
  return isInteger(arg) && arg <= 0;
} // Other

function isType(type, arg) {
  return getType(arg) === type;
}
function isArguments(arg) {
  return isTypeByToString('Arguments', arg);
}
/*
 * Helpers
 */

function getType(arg) {
  return typeof arg;
}

var toString = Object.prototype.toString;

function isTypeByToString(type, arg) {
  return toString.call(arg) === "[object " + type + "]";
}

exports.isArguments = isArguments;
exports.isArray = isArray;
exports.isBoolean = isBoolean;
exports.isDate = isDate;
exports.isEmptyObject = isEmptyObject;
exports.isEmptyString = isEmptyString;
exports.isError = isError;
exports.isFullString = isFullString;
exports.isFunction = isFunction;
exports.isInteger = isInteger;
exports.isNegativeInteger = isNegativeInteger;
exports.isNegativeIntegerOrZero = isNegativeIntegerOrZero;
exports.isNull = isNull;
exports.isNullOrUndefined = isNullOrUndefined;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isPositiveInteger = isPositiveInteger;
exports.isPositiveIntegerOrZero = isPositiveIntegerOrZero;
exports.isPrimitive = isPrimitive;
exports.isRegExp = isRegExp;
exports.isString = isString;
exports.isSymbol = isSymbol;
exports.isType = isType;
exports.isUndefined = isUndefined;
//# sourceMappingURL=is-it-type.js.map
